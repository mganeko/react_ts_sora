{"version":3,"sources":["video.tsx","index.tsx"],"names":["Video","props","elementRef","useRef","useEffect","stream","volumeValue","volume","current","srcObject","console","log","id","controls","className","ref","width","height","autoPlay","muted","playsInline","roomId","roomFromUrl","search","window","location","results","RegExp","exec","room","getRoomFromUrl","signalingKey","keyFromUrl","key","getKeyFromUrl","sora","Sora","connection","App","localStream","publisher","state","playing","connected","videoCodec","remoteStreams","startVideo","bind","stopVideoHandler","stopVideo","connect","disconnect","handleRoomChange","handleKeyChange","handleCodecChange","addRemoteStream","removeRemoteStream","removeAllRemoteStream","this","e","preventDefault","warn","navigator","mediaDevices","getUserMedia","video","audio","then","setState","catch","err","error","getTracks","forEach","track","stop","metadata","signaling_key","options","multistream","videoCodecType","videoBitRate","app","sendrecv","on","event","streams","kind","targetStream","target","trackCount","length","handleDisconnect","value","clonedStreams","Object","assign","remoteVideos","keys","push","onChange","disabled","onClick","type","size","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6cb64a40.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport './video.css';\n\n// ------ Video Component ------\ninterface VideoPropsInterface {\n  children: never[];\n  volume: number;\n  stream: MediaStream | null;\n  id: string;\n  controls: boolean;\n  width: string;\n  height: string;\n}\n\n\nfunction Video(props: VideoPropsInterface) {\n  const elementRef = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    const stream = props.stream;\n    let volumeValue = 0;\n    if (props.volume) {\n      volumeValue = props.volume;\n    }\n\n    const current: HTMLVideoElement | null = elementRef.current;\n    if (current != null) {\n      if (current.srcObject === stream) {\n        console.log('useEffect() same stream, so skip:', stream);\n      }\n      else {\n        current.srcObject = stream;\n        console.log('useEffect() set stream:', stream);\n      }\n\n      current.volume = volumeValue;\n    }\n    else {\n      console.log('useEffect() ref.current NULL');\n    }\n\n  });\n\n  console.log('Video rendering, id=%s', props.id);\n  const controls = props.controls;\n  if (controls) {\n    return (\n      <video className=\"video_with_border\" ref={elementRef} id={props.id} width={props.width} height={props.height} autoPlay muted playsInline controls ></video>\n    );\n  }\n  else {\n    return (\n      <video className=\"video_with_border\" ref={elementRef} id={props.id} width={props.width} height={props.height} autoPlay muted playsInline ></video>\n    );\n  }\n}\n\nexport default Video;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Video from './video'; // video.tsx\n//import Sora from 'sora-js-sdk';\nimport Sora, {\n  //AudioCodecType,\n  ConnectionOptions,\n  ConnectionPublisher,\n  //ConnectionSubscriber,\n  VideoCodecType,\n} from \"sora-js-sdk\";\n\nimport { MouseEvent } from 'react';\n\nimport './index.css';\n\n// ----\n// TODO\n//  - video not shown, ref is Null on addstream\n//    - maybe useEffect is usefull\n// ----\n\n// ------ params -----\nconst signalingUrl = 'wss://sora-labo.shiguredo.jp/signaling';\nlet roomId = 'user@sora-room';\nconst roomFromUrl = getRoomFromUrl();\nif (roomFromUrl && (roomFromUrl !== '')) {\n  roomId = roomFromUrl;\n}\nlet signalingKey = '';\nconst keyFromUrl = getKeyFromUrl();\nif (keyFromUrl && (keyFromUrl !== '')) {\n  signalingKey = keyFromUrl;\n}\n\n// ---- URL ----\nfunction getRoomFromUrl() {\n  const search = window.location.search;\n  const re = new RegExp('room=([^&=]+)');\n  const results = re.exec(search);\n  let room = '';\n  if (results) {\n    room = results[1];\n  }\n  return room;\n}\n\nfunction getKeyFromUrl() {\n  const search = window.location.search;\n  const re = new RegExp('key=([^&=]+)');\n  const results = re.exec(search);\n  let key = null;\n  if (results) {\n    key = results[1];\n  }\n  return key;\n}\n\n// --- Sora -----\nconst debug = false; //true;\nconst sora = Sora.connection(signalingUrl, debug);\n\n// ------ App class ------\n// interface SoraAppPropsInterface {\n//   text?: string;\n// }\n\ninterface SoraAppStateInterface {\n  playing: boolean;\n  connected: boolean;\n  roomId: string;\n  signalingKey: string;\n  videoCodec: VideoCodecType;\n  remoteStreams: { [key: string]: MediaStream; }\n}\n\nclass App extends React.Component {\n  localStream: MediaStream | null;\n  publisher: ConnectionPublisher | null;\n  state: SoraAppStateInterface;\n\n  constructor(props: object) {\n    super(props);\n    this.localStream = null;\n    this.state = {\n      playing: false,\n      connected: false,\n      roomId: roomId,\n      signalingKey: signalingKey,\n      videoCodec: 'VP9',\n      remoteStreams: {},\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.startVideo = this.startVideo.bind(this);\n    this.stopVideoHandler = this.stopVideoHandler.bind(this);\n    this.stopVideo = this.stopVideo.bind(this);\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.handleRoomChange = this.handleRoomChange.bind(this);\n    this.handleKeyChange = this.handleKeyChange.bind(this);\n    this.handleCodecChange = this.handleCodecChange.bind(this);\n    this.addRemoteStream = this.addRemoteStream.bind(this);\n    this.removeRemoteStream = this.removeRemoteStream.bind(this);\n    this.removeAllRemoteStream = this.removeAllRemoteStream.bind(this);\n\n    // -- Sora connection --\n    this.publisher = null;\n    //this.remoteStream1 = null;\n  }\n\n  componentDidMount() {\n    console.log('App DidMound()');\n  }\n\n  componentWillUnmount() {\n    console.log('App WillUnmount()');\n    if (this.localStream) {\n      this.stopVideo();\n    }\n  }\n\n  // -----------\n  startVideo(e: MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    console.log('start Video');\n    if (this.localStream) {\n      console.warn('localVideo ALREADY started');\n      return;\n    }\n\n    const constraints = { video: true, audio: true };\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then(stream => {\n        this.localStream = stream;\n        this.setState({ playing: true });\n      })\n      .catch(err => console.error('media ERROR:', err));\n  }\n\n  // stopVideo(e) {\n  //   e.preventDefault();\n  //   console.log('stop Video');\n  //   if (this.localStream) {\n  //     this.localStream.getTracks().forEach(track => track.stop());\n  //     this.localStream = null;\n  //     this.setState({ playing: false });\n  //   }\n  // }\n\n  stopVideoHandler(e: MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    console.log('stop Video');\n    this.stopVideo();\n  }\n\n  stopVideo() {\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => track.stop());\n      this.localStream = null;\n      this.setState({ playing: false });\n    }\n  }\n\n\n  // const metadata = {\n  //   signaling_key: \"jGTYhHBYhIF0IvzTTvPub0aO8qsmshksqACOCou2GrcOSNTa\"\n  // };\n  // const options = {\n  //   multistream: true\n  // };\n  // const publisher = sora.publisher(channelId, metadata, options);\n\n  // -----------------\n  connect(e: MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    console.log('connect');\n    if (this.publisher) {\n      console.warn('ALREADY connected');\n      return;\n    }\n\n    const metadata = {\n      signaling_key: this.state.signalingKey\n    };\n    const options: ConnectionOptions = {\n      audio: true,\n      multistream: true,\n      video: true,\n      videoCodecType: this.state.videoCodec,\n      videoBitRate: 1000,\n    };\n    const app = this;\n    //console.log('app:', app);\n\n    console.log('connecting roomId=%s codec=%s key=%s', this.state.roomId, options.videoCodecType, this.state.signalingKey);\n    this.publisher = sora.sendrecv(this.state.roomId, metadata, options);\n    // this.publisher.on('addstream', function (event) {\n    //   console.log('addstream id=%s', event.stream.id);\n\n    //   // --- for multi stream ---\n    //   const id = 'remote_' + event.stream.id;\n    //   app.addRemoteStream(id, event.stream);\n    // });\n    this.publisher.on('track', function (event: RTCTrackEvent) {\n      const stream = event.streams[0];\n      if (stream) {\n        console.log('addtrack stream.id=%s', stream.id);\n      }\n      else {\n        console.warn('NO stream in on track');\n        return;\n      }\n\n      // --- for multi stream ---\n      const id = 'remote_' + stream.id;\n      app.addRemoteStream(id, stream);\n    });\n\n    // this.publisher.on('removestream', function (event) {\n    //   console.log('removestream id=%s', event.stream.id);\n\n    //   // --- for multi stream ---\n    //   const id = 'remote_' + event.stream.id;\n    //   app.removeRemoteStream(id);\n    // });\n\n    this.publisher.on('removetrack', function (event: MediaStreamTrackEvent) {\n      const kind = event.track?.kind;\n      const targetStream = event.target as MediaStream;\n      if (targetStream != null) {\n        const trackCount = targetStream.getTracks().length;\n        console.log('removetracks stream.id=%s, trackKind=%s, track count=%d', targetStream.id, kind, trackCount);\n        if (trackCount > 0) {\n          return;\n        }\n\n        // --- for multi stream ---\n        const id = 'remote_' + targetStream.id;\n        app.removeRemoteStream(id);\n      }\n    });\n\n    this.publisher.on('disconnect', (e: any) => {\n      console.log('sora disconnected:', e);\n      this.handleDisconnect()\n    });\n\n    if (this.localStream != null) {\n      this.publisher.connect(this.localStream)\n        .then(() => {\n          console.log('sora connected');\n          app.setState({ connected: true });\n        })\n        .catch(err => {\n          console.error('sora connect ERROR:', err);\n          this.publisher = null;\n          this.setState({ connected: false });\n        });\n    }\n  }\n\n  disconnect(e: MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    console.log('disconnect');\n    this.handleDisconnect();\n  }\n\n  handleDisconnect() {\n    if (this.publisher) {\n      this.publisher.disconnect();\n      // localStream will be stoped\n      this.publisher = null;\n      this.localStream = null;\n      this.setState({ playing: false });\n    }\n\n    this.removeAllRemoteStream();\n\n    //this.remoteStream1 = null;\n    //this.setState({ connected: false, gotRemoteStream: false });\n    this.setState({ connected: false });\n  }\n\n  handleRoomChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ roomId: e.target.value });\n  }\n\n  handleKeyChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ signalingKey: e.target.value });\n  }\n\n  handleCodecChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    this.setState({ videoCodec: e.target.value });\n  }\n\n  // addRemoteStream(id, stream) {\n  //   const clonedStreams = Object.assign({}, this.state.remoteStreams);\n  //   clonedStreams[id] = stream;\n  //   this.setState({ remoteStreams: clonedStreams });\n  // }\n\n  addRemoteStream(id: string, stream: MediaStream) {\n    if (this.state.remoteStreams[id]) {\n      // already exist\n      console.log('remote stream ALREADY exist id=' + id);\n      return;\n    }\n\n    const clonedStreams = Object.assign({}, this.state.remoteStreams);\n    clonedStreams[id] = stream;\n    this.setState({ remoteStreams: clonedStreams });\n  }\n\n  removeRemoteStream(id: string) {\n    const clonedStreams = Object.assign({}, this.state.remoteStreams);\n    delete clonedStreams[id];\n    this.setState({ remoteStreams: clonedStreams });\n  }\n\n  removeAllRemoteStream() {\n    const newStreams = {};\n    this.setState({ remoteStreams: newStreams });\n  }\n\n  // -----------------\n  render() {\n    console.log('App render()');\n\n    const remoteVideos: JSX.Element[] = [];\n    Object.keys(this.state.remoteStreams).forEach(function (this: { [key: string]: MediaStream; }, key: string) {\n      const stream: MediaStream = this[key]; // this は this.state.remoteStream\n      console.log('key=id=%s, stream.id=%s', key, stream.id);\n      remoteVideos.push(\n        <Video id={key} key={key} width={\"320px\"} height={\"240px\"} volume={0.5} controls={true} stream={stream}>\n        </Video>\n      );\n    }, this.state.remoteStreams);\n\n    return (\n      <div className=\"App\" >\n        React - Sora Labo example<br />\n        Video Codec:\n        <select value={this.state.videoCodec} onChange={this.handleCodecChange} disabled={this.state.connected} >\n          <option value=\"VP8\">VP8</option>\n          <option value=\"VP9\">VP9</option>\n          <option value=\"H264\">H264</option>\n          <option value=\"H265\">H265</option>\n        </select>\n        &nbsp;\n        <button onClick={this.startVideo} disabled={this.state.playing || this.state.connected}> Start Video</button >\n        <button onClick={this.stopVideo} disabled={!this.state.playing || this.state.connected}>Stop Video</button>\n        <br />\n        SignalingKey: <input id=\"signaling_key\" type=\"text\" size={32} value={this.state.signalingKey} onChange={this.handleKeyChange} disabled={this.state.connected}></input>\n        <br />\n        Room: <input id=\"room_id\" type=\"text\" value={this.state.roomId} onChange={this.handleRoomChange} disabled={this.state.connected}></input>\n        <button onClick={this.connect} disabled={this.state.connected || !this.state.playing}> Connect</button >\n        <button onClick={this.disconnect} disabled={!this.state.connected}>Disconnect</button>\n        <br />\n        <div className=\"VideoContainer\">\n          <Video id={\"local_video\"} width={\"160px\"} height={\"120px\"} stream={this.localStream} volume={0} controls={false}>\n          </Video>\n          <div className=\"RemoteContainer\">\n            {remoteVideos}\n            { /*\n            <Video id={\"remote_video\"} width={\"320px\"} height={\"240px\"} volume={0.5} controls={true} stream={this.remoteStream1}>\n            </Video>\n            */ }\n          </div>\n        </div>\n      </div >\n    );\n  }\n}\n\n// ====================== ReactDOM rendering ====================\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}